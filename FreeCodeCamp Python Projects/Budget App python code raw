class Category:
    """Category model"""

    def __init__(self, category_name):
        """food,clothing,entertainment INITIALIZATION"""
        self.category_name=category_name
        self.ledger = []
        self.realcash=int()
        self.allwithdraws=int()
    def  __str__(self):
        asterisks =(30 - len(self.category_name))//2
        asterisks2=30 - (asterisks +len(self.category_name))
        asteriskss= '*'*asterisks
        asteriskss2='*'*asterisks2
        fline=f'{asteriskss}{self.category_name}{asteriskss2}\n'
        menuburger= ''
        biggestline=None
        linediff=None
        for key in self.ledger:
            z = str(key)
            splittedwords= z.split(',')[1].split(':')[1].replace('}', '').strip(), z.split(',')[0].split(' ')[1].strip()
            amountline='%.2f'%float(splittedwords[1])
            lineee= splittedwords[0][:23]+' '+str(amountline)[:7]+'\n'
            if biggestline==None:
                biggestline=len(lineee)

            if biggestline<len(lineee):
                biggestline=len(lineee)+1
            linediff=' '*(32-len(lineee))
            trueline= splittedwords[0][:23]+linediff+str(amountline)[:7]+'\n'
            menuburger = menuburger + str(trueline)
            #print('biggest line here',len(str(lineee)))
        cash= '%.2f'%self.realcash
        #totalspace=' '*(30-(len(cash)+len('Total:')))
        self.total = f'Total: {self.realcash}'

        return  f'{fline}{menuburger}{self.total}'
    #def forloop(self):
    #    for key in self.ledger:
     #       z = str(key)
     #       z.split(',')[0]
            #print(z.split(',')[1].split(':')[1].replace('}','').strip(),z.split(',')[0].split(' ')[1].strip())
     #   return print(z.split(',')[1].split(':')[1].replace('}','').strip(),z.split(',')[0].split(' ')[1].strip())
    def deposit(self,amount=0,description=''):
        self.amount=amount
        self.description = description
        #print(self.category_name,self.amount,self.description)
        #anothergoodstring = '"amount"'+": "+self.amount+',"description":' +self.description
        anothergoodstring = f"{{'amount': {self.amount}, 'description': '{self.description}'}}"
        self.ledger.append(anothergoodstring)
        #print("MY X",x)
        #print(self.ledger)
        self.realcash = self.realcash+self.amount

    def withdraw(self,amount,description=""):
        self.withdraw_amount=amount
        self.withdraw_description = description
        if self.check_funds(self.withdraw_amount) == False:
        #if self.withdraw_amount > self.amount:
            return False
        if self.check_funds(self.withdraw_amount) == True:
        #if self.withdraw_amount < self.amount:
            self.allwithdraws += self.withdraw_amount
            self.withdraw_amount = self.withdraw_amount * -1

            self.realcash = self.realcash + self.withdraw_amount
            goodstring = f'{{"amount": {self.withdraw_amount}, "description": {self.withdraw_description}}}'
            self.ledger.append(goodstring)
            #print(self.realcash)
            return True
    def get_balance(self):
        return print(self.realcash)
    def transfer(self,amount,anothercategory):
        self.transferamount=amount
        self.another_category=anothercategory
        transferfrom = f'"Transfer from {self.category_name}"'
        transferwhere = f'"Transfer to {self.another_category.category_name}"'
        if self.check_funds(self.transferamount) == True:
        #try:
            self.withdraw(self.transferamount,transferwhere)
            anothercategory.deposit(self.transferamount,transferfrom)
            return True
        else:
            return False

    def check_funds(self,amount):
        self.check_funds_amount=amount
        if self.check_funds_amount > self.realcash:
            return False
        else:
            return True

#if __name__=='__main__':

def create_spend_chart(categories):
        print("Percentage spent by category")
        cat_lengh=0
        biglist=[]
        flinenumbers=[]
        numberz=100
        allwithdraws=0
        for each in categories:
            #print("all withdraw:",each.allwithdraws)
            allwithdraws+=each.allwithdraws
            if cat_lengh<len(str(each.category_name)):
                cat_lengh=len(str(each.category_name))+1
        biglist.append(flinenumbers)
        #print("biggest cat_lengh",cat_lengh)
        row_height=cat_lengh+11 #longest column
        original_cat_lengh=cat_lengh #longest original
        for each2 in categories:
            percent=  round(((each2.allwithdraws/allwithdraws)*100),0)//10
            #print("perc",percent)
            str1= (int((10-percent))*' ')+((int(percent)+1)*'o')
            str1len=len(str1)
            i,k=0,0
            strlist=[]
            while str1len !=0:
                strlist.append(str1[i])
                i+=1
                str1len -=1
            strlist.append('-')

            while k<len(each2.category_name):
                strlist.append(f'{each2.category_name[k]}')
                k+=1
            spacesbottom= int(cat_lengh - int(len(each2.category_name)))*' '
            for space in spacesbottom:
                strlist.append(space[0])
            biglist.append(strlist)

        while numberz>0:
            if numberz==100:
                _= str(numberz)+'| '
                flinenumbers.append(_)
                numberz=numberz-10

            _ = ' '+str(numberz) + '| '
            flinenumbers.append(_)
            numberz = numberz - 10
            if numberz==0:
                _ = '  '+str(numberz) + '| '
                flinenumbers.append(_)

        flinenumbers.append('    -')
        #print("cat_lengh",cat_lengh)
        while cat_lengh-2>=0:
            flinenumbers.append('     ')
            cat_lengh-=1

        #print(biglist)
        #print(row_height)

        spacecolumn=11*' '+'-'+'  '*original_cat_lengh
        #print(spacecolumn)
        #print("rowheigh:",row_height)
        for i in range(row_height):#rows 19
            newstr = ''
            for j in range(len(biglist)):#columns 4
                if j==0:
                    newstr = newstr + biglist[j][i]
                if j!=0:
                    newstr=newstr+biglist[j][i]+spacecolumn[i]+spacecolumn[i]

            print(newstr)
        #print(newstr)
        #print(stupidlist)
        #print(biglist[0])
        #print(biglist[1])
        #print(biglist[2])
        #print(biglist[3])
        #print(len(biglist[0]))
        #print(len(biglist[1]))
        #print(len(biglist[2]))
        #print(len(biglist[3]))
'''
    food = Category("Food")
    food.deposit(1000, "initial deposit")
    food.withdraw(10.15, "groceries")
    food.withdraw(15.89, "restaurant and more food for dessert")
    #print("food balance:",food.get_balance())
    clothing =Category("Clothing")
    food.transfer(50, clothing)
    clothing.withdraw(25.55)
    clothing.withdraw(100)
    auto = Category("Auto")
    auto.deposit(1000, "initial deposit")
    auto.withdraw(15)

    print(food)
    print(clothing)
    print(auto)
    print(create_spend_chart([food, clothing, auto]))
'''
food = Category("Food")
entertainment = Category("Entertainment")
business = Category("Business")
food.deposit(900, "deposit")
entertainment.deposit(900, "deposit")
business.deposit(900, "deposit")
food.withdraw(105.55)
entertainment.withdraw(33.40)
business.withdraw(10.99)
actual = create_spend_chart([business, food, entertainment])
